# Module-level debug: Confirm file is loaded
print("üîç –ú–æ–¥—É–ª—å cogs.relationships –∑–∞–≥—Ä—É–∂–µ–Ω (—Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω)!")

import discord
from discord.ext import commands
import json
import os
import random
import ast  # –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ rel_key
from typing import Dict, List
import traceback  # For error traces

# Lazy import: Import RelationshipSystem only when needed
RelationshipSystem = None


class RelationshipCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        try:
            global RelationshipSystem
            if RelationshipSystem is None:
                from Relationship_System import RelationshipSystem

                print("‚úÖ –ò–º–ø–æ—Ä—Ç RelationshipSystem —É—Å–ø–µ—à–µ–Ω –≤ __init__!")
            self.system = RelationshipSystem()
            print(f"‚úÖ RelationshipCog –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è {bot.user}!")
        except ImportError as e:
            print(f"‚ùå ImportError RelationshipSystem –≤ __init__: {e}")
            traceback.print_exc()

            # Fallback: Dummy system for testing (remove in production)
            class DummySystem:
                def __init__(self):
                    self.characters = {}
                    self.relationships = {}

                def save_data(self):
                    pass

                def load_data(self):
                    pass

            self.system = DummySystem()
            print(
                "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è dummy RelationshipSystem (–∫–æ–º–∞–Ω–¥—ã –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ)"
            )
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RelationshipCog: {e}")
            traceback.print_exc()
            raise  # Re-raise to prevent partial load

        self.relationship_descriptions = {
            1: "üî¥ –í—Ä–∞–∂–¥–∞",
            2: "üî¥ –ö–æ–Ω—Ñ–ª–∏–∫—Ç",
            3: "üü° –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ",
            4: "üü° –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ",
            5: "üü¢ –î—Ä—É–∂–µ–ª—é–±–∏–µ",
            6: "üü¢ –°–∏–º–ø–∞—Ç–∏—è",
            7: "üîµ –î—Ä—É–∂–±–∞",
            8: "üîµ –ë–ª–∏–∑–æ—Å—Ç—å",
            9: "üíñ –õ—é–±–æ–≤—å",
            10: "üíñ –î—É—à–∞",
        }

        # Debug: List commands after init
        print(
            "üìù –ö–æ–º–∞–Ω–¥—ã –≤ RelationshipCog:", [cmd.name for cmd in self.get_commands()]
        )

    @commands.command(name="–¥–æ–±–∞–≤–∏—Ç—å")
    async def add_character(self, ctx, *, name: str):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        name = name.strip()  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        if not name:
            await ctx.send("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return
        if name in self.system.characters:
            await ctx.send(f"‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ `{name}` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return

        self.system.characters[name] = {
            "added_by": ctx.author.id,
            "added_date": ctx.message.created_at.isoformat(),
        }
        self.system.save_data()

        embed = discord.Embed(
            title="‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ –¥–æ–±–∞–≤–ª–µ–Ω",
            description=f"–ü–µ—Ä—Å–æ–Ω–∞–∂ `{name}` —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            color=0x00FF00,
        )
        await ctx.send(embed=embed)

    @commands.command(name="—É–¥–∞–ª–∏—Ç—å")
    async def remove_character(self, ctx, *, name: str):
        """–£–¥–∞–ª–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        name = name.strip()
        if not name:
            await ctx.send("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return
        if name not in self.system.characters:
            await ctx.send(f"‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ `{name}` –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        del self.system.characters[name]
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∏—Å—Ö–æ–¥—è—â–∏–µ (name ‚Üí other) –∏ –≤—Ö–æ–¥—è—â–∏–µ (other ‚Üí name) –æ—Ç–Ω–æ—à–µ–Ω–∏—è
        to_remove = []
        for rel_key in list(self.system.relationships):
            try:
                chars = ast.literal_eval(rel_key)
                if name in chars:  # Either direction
                    to_remove.append(rel_key)
            except (ValueError, SyntaxError):
                continue
        for rel_key in to_remove:
            del self.system.relationships[rel_key]

        self.system.save_data()
        await ctx.send(f"‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ `{name}` –∏ –≤—Å–µ –µ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã!")

    @commands.command(name="–ø–µ—Ä—Å–æ–Ω–∞–∂–∏")
    async def list_characters(self, ctx):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
        if not self.system.characters:
            await ctx.send("‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π!")
            return

        characters = list(self.system.characters.keys())
        embed = discord.Embed(
            title="üë• –°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π",
            description=f"–í—Å–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {len(characters)}\n\n"
            + "\n".join([f"‚Ä¢ {char}" for char in sorted(characters)]),
            color=0x9370DB,
        )
        await ctx.send(embed=embed)

    @commands.command(name="–±—Ä–æ—Å–æ–∫")
    async def roll_relationships(self, ctx):
        """–ë—Ä–æ—Å–∏—Ç—å –∫—É–±—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π (—Ç–µ–ø–µ—Ä—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ)"""
        if len(self.system.characters) < 2:
            await ctx.send("‚ùå –ù—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!")
            return

        characters = list(self.system.characters.keys())
        relationships_created = 0

        for char1 in characters:
            for char2 in characters:
                if char1 == char2:  # No self-relation
                    continue

                rel_key = str((char1, char2))  # Directed: (from, to), no sorting

                if rel_key not in self.system.relationships:
                    roll = random.randint(1, 10)

                    self.system.relationships[rel_key] = {
                        "value": roll,
                        "description": self.relationship_descriptions[roll],
                        "rolled_by": ctx.author.id,
                        "roll_date": ctx.message.created_at.isoformat(),
                    }
                    relationships_created += 1

        self.system.save_data()

        embed = discord.Embed(
            title="üé≤ –û—Ç–Ω–æ—à–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã!",
            description=f"–°–æ–∑–¥–∞–Ω–æ {relationships_created} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π.",
            color=0x0099FF,
        )
        await ctx.send(embed=embed)

    @commands.command(name="—Ç–∞–±–ª–∏—Ü–∞")
    async def show_relationship_table(self, ctx):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –æ—Ç–Ω–æ—à–µ–Ω–∏–π (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞)"""
        if not self.system.relationships:
            await ctx.send("‚ùå –û—Ç–Ω–æ—à–µ–Ω–∏—è –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `!–±—Ä–æ—Å–æ–∫`")
            return

        characters = sorted(self.system.characters.keys())

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É: —Å—Ç—Ä–æ–∫–∏ = from, —Å—Ç–æ–ª–±—Ü—ã = to
        table = "```\n"
        table += " " * 15
        for char in characters:
            table += f"{char[:8]:>8} "
        table += "\n" + "-" * (15 + 9 * len(characters)) + "\n"

        for char1 in characters:  # From
            table += f"{char1[:14]:<14} "
            for char2 in characters:  # To
                if char1 == char2:
                    table += "    ‚Äî    "
                else:
                    rel_key = str((char1, char2))  # Directed from char1 to char2
                    if rel_key in self.system.relationships:
                        rel = self.system.relationships[rel_key]
                        table += f"    {rel['value']}    "
                    else:
                        table += "    ?    "
            table += "\n"
        table += "```"

        embed = discord.Embed(
            title="üìä –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è)",
            description=table,
            color=0xFFD700,
        )

        # –õ–µ–≥–µ–Ω–¥–∞
        legend = ""
        for value, desc in self.relationship_descriptions.items():
            legend += f"{value}: {desc}\n"

        embed.add_field(name="üéØ –õ–µ–≥–µ–Ω–¥–∞", value=legend, inline=False)
        embed.set_footer(text="–°—Ç—Ä–æ–∫–∏: –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –û–¢ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –°—Ç–æ–ª–±—Ü—ã: –ö –ø–µ—Ä—Å–æ–Ω–∞–∂—É")
        await ctx.send(embed=embed)

    @commands.command(name="–æ—Ç–Ω–æ—à–µ–Ω–∏—è")
    async def show_detailed_relationships(self, ctx, *, character_name: str = None):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –∏—Å—Ö–æ–¥—è—â–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞)"""
        if not self.system.relationships:
            await ctx.send("‚ùå –û—Ç–Ω–æ—à–µ–Ω–∏—è –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã!")
            return

        embed = discord.Embed(title="üíû –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è", color=0xFF69B4)

        if character_name:
            character_name = character_name.strip()
            if character_name not in self.system.characters:
                await ctx.send(f"‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ `{character_name}` –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return

            # –¢–æ–ª—å–∫–æ –∏—Å—Ö–æ–¥—è—â–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –æ—Ç character_name –∫ –¥—Ä—É–≥–∏–º
            relationships = []
            other_chars = [c for c in self.system.characters if c != character_name]
            for other_char in other_chars:
                rel_key = str((character_name, other_char))  # Directed: from ‚Üí to
                if rel_key in self.system.relationships:
                    rel_data = self.system.relationships[rel_key]
                    relationships.append((other_char, rel_data))
                else:
                    relationships.append((other_char, None))  # No relation yet

            if not any(rel[1] for rel in relationships):
                embed.description = f"–£ {character_name} –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏–π."
            else:
                desc = f"–û—Ç–Ω–æ—à–µ–Ω–∏—è **{character_name}** ‚Üí –¥—Ä—É–≥–∏–º:\n\n"
                for other_char, rel_data in sorted(
                    relationships,
                    key=lambda x: (x[1]["value"] if x[1] else 0) if x[1] else (0, x[0]),
                    reverse=True,
                ):
                    if rel_data:
                        desc += f"**{character_name} ‚Üí {other_char}**: {rel_data['value']} - {rel_data['description']}\n"
                    else:
                        desc += f"**{character_name} ‚Üí {other_char}**: –ù–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è\n"
                embed.description = desc
        else:
            # –í—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è (from ‚Üí to)
            desc = "–í—Å–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è (–æ—Ç ‚Üí –∫):\n\n"
            all_rels = []
            for rel_key, rel_data in self.system.relationships.items():
                try:
                    chars = ast.literal_eval(rel_key)
                    all_rels.append((chars[0], chars[1], rel_data))
                except (ValueError, SyntaxError):
                    continue
            for from_char, to_char, rel_data in sorted(
                all_rels, key=lambda x: x[2]["value"], reverse=True
            ):
                desc += f"**{from_char} ‚Üí {to_char}**: {rel_data['value']} - {rel_data['description']}\n"
            embed.description = desc

        await ctx.send(embed=embed)

    @commands.command(name="–ø–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å")
    async def reroll_relationship(self, ctx, char1: str, char2: str):
        """–ü–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ—Ç char1 –∫ char2 (—Å –ª–æ–≥–∏–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏)"""
        char1 = char1.strip()
        char2 = char2.strip()
        if not char1 or not char2:
            await ctx.send("‚ùå –ò–º–µ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏!")
            return
        if char1 == char2:
            await ctx.send("‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Å–µ–±–µ!")
            return

        rel_key = str((char1, char2))  # Directed: from char1 to char2

        if rel_key not in self.system.relationships:
            await ctx.send(
                f"‚ùå –û—Ç–Ω–æ—à–µ–Ω–∏–µ –æ—Ç `{char1}` –∫ `{char2}` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `!–±—Ä–æ—Å–æ–∫` —Å–Ω–∞—á–∞–ª–∞."
            )
            return

        old_data = self.system.relationships[rel_key]
        old_value = old_data["value"]

        new_roll = random.randint(1, 10)
        # –õ–æ–≥–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
        if new_roll > old_value:
            final_value = min(10, old_value + 1)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 1, –º–∞–∫—Å 10
        elif new_roll == 1:
            final_value = max(1, old_value - 1)  # –£–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 1, –º–∏–Ω 1


# Async setup function (required for Discord.py 2.x cog extensions)
async def setup(bot):
    await bot.add_cog(RelationshipCog(bot))
    print("‚úÖ RelationshipCog –¥–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ async setup!")
